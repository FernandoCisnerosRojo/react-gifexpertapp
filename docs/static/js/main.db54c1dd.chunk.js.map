{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,YAClB,MAAO,CACHC,GAFyC,EAAxBA,GAGjBC,MAHyC,EAApBA,MAIrBT,IAJyC,EAAbU,OAIhBC,iBAAiBX,QATlB,kBAaZM,GAbY,4CAAH,sDCYLM,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBR,EAAiB,EAAjBA,IAAKS,EAAY,EAAZA,MAE5B,OACI,sBAAKI,UAAU,0CAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCkBDO,EArBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SACf,ECFwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAC,GACnBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGlB,CAACnB,IAEGoB,EDb2BK,CAAazB,GAAjCY,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAEtB,OACI,qCACI,6BAAKnB,IAEJmB,GAAW,8CAEZ,qBAAKJ,UAAU,YAAf,SACKH,EAAOH,KAAI,SAACiB,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEclBiB,EAzBM,WAEjB,MAAoCzC,mBAAS,IAA7C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,gCACI,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCfjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.db54c1dd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cat => [inputValue, ...cat])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleOnSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=M993sohymAg3hBZ7Q5gA6aki48pwkTK1`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map(({ id, title, images }) => {\r\n        return {\r\n            id: id,\r\n            title: title,\r\n            url: images.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({ id, url, title }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInX\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>'Cargando...'</p>}\r\n\r\n            <div className='card-grid'>\r\n                {images.map((img) => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React from 'react'\r\nimport { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <hr></hr>\r\n\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}